@startuml
class ASMPracticeCode.NamingConventionDummyData.PerfectlyOkayClass {
- String field
- int field1
- boolean field_2
+ String method()
+ int method1()
+ boolean method_2()
}
abstract class ASMPracticeCode.AbstractClass {
# int total
+ int templateMethod()
+ {abstract}int primitiveOperation1()
+ {abstract}int primitiveOperation2()
}
class Domain.Checks.SingleResponsibilityPrincipleCheck {
- float maximumMethods
+ PresentationInformation check(List<ClassAdapter>,UserOptions)
}
class Domain.Checks.StrategyPatternCheck {
+ PresentationInformation check(List<ClassAdapter>,UserOptions)
- String formatDisplayLine(ClassAdapter,List<ClassAdapter>)
- List<ClassAdapter> findLowerLevelClasses(ClassAdapter,List<ClassAdapter>)
- List<ClassAdapter> allClassesThatExtend(String,List<ClassAdapter>)
- List<ClassAdapter> allClassesThatImplement(String,List<ClassAdapter>)
}
class Domain.Adapters.ASMMethod {
- MethodNode node
+ String getMethodName()
+ Boolean getIsPublic()
+ String getReturnType()
+ List<String> getArgTypes()
+ Boolean isStatic()
+ List<String> getInstructions()
+ List<Integer> getInstOpCodes()
}
class Domain.Checks.NamingConventionCheck {
+ PresentationInformation check(List<ClassAdapter>,UserOptions)
}
class ASMPracticeCode.NamingConventionDummyData.FinalsClass {
- int FIELD
- String FIELD1
- boolean FIELD_2
}
abstract class ASMPracticeCode.ObserverDummyData.Observee {
# int num
+ {abstract}int update()
+ int display()
}
class ASMPracticeCode.ObserverDummyData.ObserveeSub3 {
+ int update()
}
class DataSource.DataLoader {
+ byte[] loadFileBytes(String)
}
class Domain.ASMProjectDataManager {
+ ClassAdapter createClassAdapter(String)
}
class ASMPracticeCode.GetterSetterDummyData.NoGettersSetters {
- int number
- String string
- int getNumber()
}
abstract class Presentation.UI {
~ Linter linter
~ List<CheckType> availibleChecks
+ {abstract}void UIMain()
}
abstract class Domain.ProjectDataManager {
# DataLoader dataLoader
+ List<ClassAdapter> generateClassAdapters(String)
+ {abstract}ClassAdapter createClassAdapter(String)
}
class ASMPracticeCode.ObserverDummyData.Observer {
- ArrayList<Observee> observees
+ boolean add(Observee)
+ boolean remove(Observee)
+ boolean updateAll()
+ boolean displayAll()
}
abstract class Domain.Adapters.ClassAdapter {
+ {abstract}String getClassName()
+ {abstract}Boolean getIsPublic()
+ {abstract}String getExtends()
+ {abstract}List<String> getInterfaces()
+ {abstract}List<MethodAdapter> getAllMethods()
+ {abstract}List<FieldAdapter> getAllFields()
+ {abstract}Boolean matchesClassName(String)
+ {abstract}Boolean getIsAbstract()
}
class Domain.PresentationInformation {
+ boolean passed
+ CheckType checkName
+ List<String> displayLines
}
class ASMPracticeCode.StrategyDummyData.ConcreteStrategy1 {
+ void someMethod()
}
interface ASMPracticeCode.StrategyDummyData.StrategyInterface {
+ void someMethod()
}
abstract class Domain.Adapters.FieldAdapter {
+ {abstract}String getFieldName()
+ {abstract}Boolean getIsPublic()
+ {abstract}boolean getIsFinal()
+ {abstract}String getType()
}
class ASMPracticeCode.SimpleClass {
- String hello
+ void printName(String)
}
class ASMPracticeCode.ConcreteClass2 {
+ int primitiveOperation1()
+ int primitiveOperation2()
+ boolean equals(Object)
}
class ASMPracticeCode.ObserverDummyData.Main {
+ {static} void main(String[])
+ {static} ArrayList<String> listFilesForFolder(File)
- {static} ArrayList<String> checkForAbstractListField(ClassNode)
}
class ASMPracticeCode.Main {
+ {static} void main(String[])
- {static} boolean styleCheckEqualsHashCode(ClassNode)
- {static} void printClass(ClassNode)
- {static} void printFields(ClassNode)
- {static} void printMethods(ClassNode)
- {static} void printInstructions(MethodNode)
}
class ASMPracticeCode.StrategyDummyData.ConcreteStrategy {
+ void someMethod()
}
abstract class ASMPracticeCode.Decorator {
- AbstractClass abstractClass
}
class ASMPracticeCode.SingletonPatternDummyData {
}
class Domain.Adapters.ASMClass {
- ClassNode node
+ String getClassName()
+ Boolean getIsPublic()
+ String getExtends()
+ List<String> getInterfaces()
+ List<MethodAdapter> getAllMethods()
+ List<FieldAdapter> getAllFields()
+ Boolean matchesClassName(String)
+ Boolean getIsAbstract()
}
interface Domain.Checks.Check {
+ {abstract}PresentationInformation check(List<ClassAdapter>,UserOptions)
}
class Domain.Linter {
- ProjectDataManager projectDataManager
- Map<CheckType,Check> checkComposition
- List<ClassAdapter> classAdapters
+ List<PresentationInformation> runChecks(List<CheckType>,String,UserOptions)
}
class Main {
+ {static} void main(String[])
}
class ASMPracticeCode.GetterSetterDummyData.DataClass {
- int number
- String string
- int getNumber()
- String getString()
}
class ASMPracticeCode.GetterSetterDummyData.GetterSetterClass {
- int number
- String string
+ boolean someCalculation()
+ void setNumber(int)
+ void setString(String)
+ int getNumber()
+ String getString()
}
abstract class Domain.Adapters.MethodAdapter {
+ {abstract}String getMethodName()
+ {abstract}Boolean getIsPublic()
+ {abstract}String getReturnType()
+ {abstract}List<String> getArgTypes()
+ {abstract}Boolean isStatic()
+ {abstract}List<String> getInstructions()
+ {abstract}List<Integer> getInstOpCodes()
}
class ASMPracticeCode.NamingConventionDummyData.EverythingErrorClass {
- int Field
- String FIeLD1
- boolean field_2
- double FIELD_3
+ int Method()
+ String METHOD_2()
}
class Domain.Checks.EqualsHashCodeCheck {
+ PresentationInformation check(List<ClassAdapter>,UserOptions)
}
enum Domain.CheckType {
+  PoorNamingConvention
+  EqualsAvoidNull
+  EqualsHashCode
+  InformationHidingViolation
+  HollywoodPrinciple
+  SingleResponsibilityPrinciple
+  ObserverPattern
+  StrategyPattern
+  DecoratorPattern
}
class ASMPracticeCode.ConcreteClass1 {
+ int primitiveOperation1()
+ int primitiveOperation2()
+ boolean equals(Object)
}
class AdapterTests {
+ void testLoadsBytes()
+ void testCreatesAdapter()
+ void testClassAdapterHasAllInfo()
}
class Domain.Adapters.ASMField {
- FieldNode node
+ String getFieldName()
+ Boolean getIsPublic()
+ String getType()
+ boolean getIsFinal()
}
class Domain.Checks.DecoratorPatternCheck {
+ PresentationInformation check(List<ClassAdapter>,UserOptions)
}
class Presentation.ConsoleUI {
+ void UIMain()
- UserOptions getUserOptions(ArrayList<CheckType>,BufferedReader)
- void displayResults(ArrayList<PresentationInformation>)
}
class Domain.UserOptions {
+ int maximumMethods
}
class ASMPracticeCode.ObserverDummyData.ObserveeAdd5 {
+ int update()
}
class ASMPracticeCode.GetterSetterDummyData.Main {
+ {static} void main(String[])
- {static} void checkForSetters(ClassNode)
- {static} void checkForGetters(ClassNode)
- {static} boolean singletonCheck(ClassNode)
}


Domain.Checks.Check <|.. Domain.Checks.SingleResponsibilityPrincipleCheck
Domain.Checks.Check <|.. Domain.Checks.StrategyPatternCheck
Domain.Adapters.MethodAdapter <|-- Domain.Adapters.ASMMethod
Domain.Checks.Check <|.. Domain.Checks.NamingConventionCheck
ASMPracticeCode.ObserverDummyData.Observee <|-- ASMPracticeCode.ObserverDummyData.ObserveeSub3
Domain.ProjectDataManager <|-- Domain.ASMProjectDataManager
ASMPracticeCode.StrategyDummyData.StrategyInterface <|.. ASMPracticeCode.StrategyDummyData.ConcreteStrategy1
ASMPracticeCode.AbstractClass <|-- ASMPracticeCode.ConcreteClass2
ASMPracticeCode.StrategyDummyData.StrategyInterface <|.. ASMPracticeCode.StrategyDummyData.ConcreteStrategy
ASMPracticeCode.AbstractClass <|-- ASMPracticeCode.Decorator
Domain.Adapters.ClassAdapter <|-- Domain.Adapters.ASMClass
Domain.Checks.Check <|.. Domain.Checks.EqualsHashCodeCheck
ASMPracticeCode.AbstractClass <|-- ASMPracticeCode.ConcreteClass1
Domain.Adapters.FieldAdapter <|-- Domain.Adapters.ASMField
Domain.Checks.Check <|.. Domain.Checks.DecoratorPatternCheck
Presentation.UI <|-- Presentation.ConsoleUI
ASMPracticeCode.ObserverDummyData.Observee <|-- ASMPracticeCode.ObserverDummyData.ObserveeAdd5
@enduml